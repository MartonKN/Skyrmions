function initializeGPE(filenameBase)
% This function sets all necessary variables for the GPE solver and puts
% them into files, so that the C++ GPE solver program can just read these
% data in. Then no recompilation of the C++ program is needed.

% File structure that this function develops:
%   ...__TIME__Filenames
%        Text file. Contains the file names of all the files generated by
%        this program below.
%   ...__TIME__SystemParameters
%        Text file. Stores the variables of the GPE Solver given in the
%        SystemParamters namespace.
%   NOTE: TIME here means the time of the run of this function.


% Set SystemParameters
% All quantities of energy dimension will be measured in the units of 
% V0=(V11+V22)/2. (And consequently time will be measured in units of 1/V0.)
    % Spatial and temporal resolution
    SysParams__Mx=128;                          % number of points in each direction of the grid
    SysParams__My=128;   
    SysParams__Mz=128; 
    SysParams__ax=1.0;                          % lengths of one spatial step (they can take any value since it
    SysParams__ay=1.0;                          % has no efect on the calculations on the grid.)
    SysParams__az=1.0;
    SysParams__tmax=10.0;                       % maximal imaginary time and imaginary time step of the simulation
    SysParams__dt=0.001;                        % (the latter will be reset anyway in the program)
    
    % Parameters of the action
    SysParams__T=1/100;                         % temperature
    SysParams__V0=1.0;                          % interaction terms
    SysParams__V2=0.1;
    SysParams__J=0.008;                         % hopping
    SysParams__mu_0=0.08;                       % chemical potentials in the middle of the trap
    SysParams__trapx=0.15/((SysParams__Mx-1)/2)^2;
    SysParams__trapy=0.15/((SysParams__My-1)/2)^2;
    SysParams__trapz=0.15/((SysParams__Mz-1)/2)^2;
                                                % -mu[i][j][k] = -mu_0 + trapx*(i-(Mx-1)/2)^2 + trapy*(j-(My-1)/2)^2 + trapz*(k-(Mz-1)/2)^2,
                                                % trapx=m*omega_x^2*ax^2/2, etc.
    
    
    % Spline parameters
    SysParams__Nmax=2;                          % the maximal number of atoms per site
    SysParams__AbsPsi_Max=0.15;                 % the edges of the cube on which the spline is defined
                                                % currently these are only approximations, and will be reset in the program
    SysParams__SqrtMinusDmu_Max=sqrt(SysParams__trapx*((SysParams__Mx-1)/2)^2 ...
                                    +SysParams__trapy*((SysParams__My-1)/2)^2 ...
                                    +SysParams__trapz*((SysParams__Mz-1)/2)^2)*1.05;
    SysParams__AbsPsi_Steps=71;                 % number of sample points for the spline in each direction
    SysParams__AbsF_Steps=71;
    SysParams__SqrtMinusDmu_Steps=71;
    SysParams__D_AbsPsi=SysParams__AbsPsi_Max/(SysParams__AbsPsi_Steps-1);
    SysParams__D_AbsF  =1.0/(SysParams__AbsF_Steps-1);
    SysParams__D_SqrtMinusDmu=SysParams__SqrtMinusDmu_Max/(SysParams__SqrtMinusDmu_Steps-1);
                                                % stepsizes of the grid
    % parameters of the random noise
    SysParams__addNoiseTimes= 0.005*SysParams__tmax;
    SysParams__noOfFreqs=     40;
    SysParams__maxFreqRate=   [0.3,0.3,0.3];
    SysParams__randomnessRate=[0.5,0.5,0.5];
    
    % Parameters for saving
    SysParams__saving_times=[0.000*SysParams__tmax,...
                             0.0002*SysParams__tmax,...
                             0.0008*SysParams__tmax,...
                             0.002*SysParams__tmax,...
                             0.010*SysParams__tmax,...
                             0.050*SysParams__tmax,...
                             0.100*SysParams__tmax,...
                             0.200*SysParams__tmax,...
                             0.300*SysParams__tmax,...
                             0.400*SysParams__tmax,...
                             0.500*SysParams__tmax,...
                             0.700*SysParams__tmax,...
                             0.900*SysParams__tmax,...
                             0.999*SysParams__tmax,...
                             ];
    SysParams__dispform_saving_times=[3,6];     % saving times will appear in the filenames in
                                                % '%dispform_saving_times[0].dispform_saving_times[1]f' format
    SysParams__nthreads='1';                    % number of threads used during parallelization:
                                                % '1', '2', '3', ... 'USE_MAX_NUM_PROCS'

% Create filenames
    currentDateAndTime=clock;
    currentDateAndTimeString=num2str(currentDateAndTime(1),'%4.0f');
    if(currentDateAndTime(2)<10)
        currentDateAndTimeString=[currentDateAndTimeString,'_0', ...
                                  num2str(currentDateAndTime(2),'%2.0f')];
    else
        currentDateAndTimeString=[currentDateAndTimeString,'_', ...
                                  num2str(currentDateAndTime(2),'%2.0f')];        
    end
    if(currentDateAndTime(3)<10)
        currentDateAndTimeString=[currentDateAndTimeString,'_0', ...
                                  num2str(currentDateAndTime(3),'%2.0f')];
    else
        currentDateAndTimeString=[currentDateAndTimeString,'_', ...
                                  num2str(currentDateAndTime(3),'%2.0f')];
    end
    if(currentDateAndTime(4)<10)
        currentDateAndTimeString=[currentDateAndTimeString,'__0', ...
                                  num2str(currentDateAndTime(4),'%2.0f')];
    else
        currentDateAndTimeString=[currentDateAndTimeString,'__', ...
                                  num2str(currentDateAndTime(4),'%2.0f')];
    end
    if(currentDateAndTime(5)<10)
        currentDateAndTimeString=[currentDateAndTimeString,'_0', ...
                                  num2str(currentDateAndTime(5),'%2.0f')];
    else
        currentDateAndTimeString=[currentDateAndTimeString,'_', ...
                                  num2str(currentDateAndTime(5),'%2.0f')];
    end
    filenameStub=[filenameBase,'__',currentDateAndTimeString];
    filenameSystemParameters=[filenameStub,'__SystemParameters'];
    filenameFilenames=[filenameStub,'__Filenames'];

% Save the other filenames in filenameFilenames.
    fileIDFilenames=fopen(filenameFilenames,'w');
    fprintf(fileIDFilenames,'%s\n',filenameSystemParameters);
    fclose(fileIDFilenames);
    
% Create a temporary file (tmpSysParams.mat) that contains the system
% parameter values for later use (except for the spline parameters).
    filenameTmpSysParams='tmpSysParams.mat';
    save(filenameTmpSysParams,'SysParams__Mx','SysParams__My','SysParams__Mz',...
         'SysParams__ax','SysParams__ay','SysParams__az','SysParams__tmax',...
         'SysParams__dt','SysParams__T','SysParams__V0',...
         'SysParams__V2','SysParams__J','SysParams__mu_0',...
         'SysParams__trapx','SysParams__trapy','SysParams__trapz',...
         'SysParams__Nmax',...
         'SysParams__AbsPsi_Max',...
         'SysParams__SqrtMinusDmu_Max',...
         'SysParams__AbsPsi_Steps','SysParams__AbsF_Steps',...
         'SysParams__SqrtMinusDmu_Steps',...
         'SysParams__D_AbsPsi','SysParams__D_AbsF',...
         'SysParams__D_SqrtMinusDmu',...
         'SysParams__addNoiseTimes',...
         'SysParams__noOfFreqs',...
         'SysParams__maxFreqRate',...
         'SysParams__randomnessRate',...
         'SysParams__saving_times',...
         'SysParams__dispform_saving_times','SysParams__nthreads');

% Create a run file for the cluster
    generateRunFile(filenameStub,filenameFilenames,filenameTmpSysParams);
    disp('Run file done.');
    
% Delete the temporary file filenameTmpSysParams.
    delete(filenameTmpSysParams);
    
% Save system parameters to filenameSystemParameters
    fileIDSystemParameters=fopen(filenameSystemParameters,'w');
    fprintf(fileIDSystemParameters,'Grid size:\n');
    fprintf(fileIDSystemParameters,'SystemParameters::Mx=%d,\n',SysParams__Mx);
    fprintf(fileIDSystemParameters,'SystemParameters::My=%d,\n',SysParams__My);
    fprintf(fileIDSystemParameters,'SystemParameters::Mz=%d,\n',SysParams__Mz);
    fprintf(fileIDSystemParameters,'\n');
    fprintf(fileIDSystemParameters,'SystemParameters::ax=%3.6f,\n',SysParams__ax);
    fprintf(fileIDSystemParameters,'SystemParameters::ay=%3.6f,\n',SysParams__ay);
    fprintf(fileIDSystemParameters,'SystemParameters::az=%3.6f,\n',SysParams__az);
    fprintf(fileIDSystemParameters,'\n');
    fprintf(fileIDSystemParameters,'Maximal imaginary time and imaginary time step of the GPE simulation\n');
    fprintf(fileIDSystemParameters,'SystemParameters::tmax=%3.6f,\n',SysParams__tmax);
    fprintf(fileIDSystemParameters,'SystemParameters::dt=%3.8f,\n',SysParams__dt);
    fprintf(fileIDSystemParameters,'\n');
    fprintf(fileIDSystemParameters,'Physical parameters (energy measured in units of V0:\n');
    fprintf(fileIDSystemParameters,'SystemParameters::T=%3.6f,\t\t\t(Temperature)\n',SysParams__T);
    fprintf(fileIDSystemParameters,'SystemParameters::J=%3.6f,\t\t\t(Hopping parameter of the Hamiltonian)\n',SysParams__J);
    fprintf(fileIDSystemParameters,'SystemParameters::mu_0=%3.6f,\t\t(Chemical potentials in the middle of the trap)\n',SysParams__mu_0);
    fprintf(fileIDSystemParameters,'SystemParameters::V0=%3.6f,\n',SysParams__V0);
    fprintf(fileIDSystemParameters,'SystemParameters::V2=%3.6f,\t\t\t(Interaction parameters of the Hamiltonian)\n',SysParams__V2);
    fprintf(fileIDSystemParameters,'SystemParameters::trapx=%3.10f,\t\t(-mu[i][j][k] = -mu_0 + trapx*(i-(Mx-1)/2)^2 + trapy*(j-(My-1)/2)^2 + trapz*(k-(Mz-1)/2)^2,)\n',SysParams__trapx);
    fprintf(fileIDSystemParameters,'SystemParameters::trapy=%3.10f,\t\t(trapx=m*omega_x^2*ax^2/2, etc.)\n',SysParams__trapy);
    fprintf(fileIDSystemParameters,'SystemParameters::trapz=%3.10f,\n',SysParams__trapz);
    fprintf(fileIDSystemParameters,'\n');
    fprintf(fileIDSystemParameters,'Parameters for the splines:\n');
    fprintf(fileIDSystemParameters,'SystemParameters::Nmax=%d,\n',SysParams__Nmax);
    fprintf(fileIDSystemParameters,'SystemParameters::AbsPsi_Max=%3.6f,\n',SysParams__AbsPsi_Max);
    fprintf(fileIDSystemParameters,'SystemParameters::SqrtMinusDmu_Max=%3.6f,\n',SysParams__SqrtMinusDmu_Max);
    fprintf(fileIDSystemParameters,'SystemParameters::AbsPsi_Steps=%d,\n',SysParams__AbsPsi_Steps);
    fprintf(fileIDSystemParameters,'SystemParameters::AbsF_Steps=%d,\n',SysParams__AbsF_Steps);
    fprintf(fileIDSystemParameters,'SystemParameters::SqrtMinusDmu_Steps=%d,\n',SysParams__SqrtMinusDmu_Steps);
    fprintf(fileIDSystemParameters,'SystemParameters::D_AbsPsi=%3.6f,\n',SysParams__D_AbsPsi);
    fprintf(fileIDSystemParameters,'SystemParameters::D_AbsF=%3.6f,\n',SysParams__D_AbsF);
    fprintf(fileIDSystemParameters,'SystemParameters::D_SqrtMinusDmu=%3.6f,\n',SysParams__D_SqrtMinusDmu);
    fprintf(fileIDSystemParameters,'\n');
    
    fprintf(fileIDSystemParameters,'Random noise parameters:\n');
    tmpSize=size(SysParams__addNoiseTimes); tmpSize=tmpSize(2);
    for j=1:tmpSize
        tmpString=['SystemParameters::addNoiseTimes[',num2str(j-1,'%4.0f'),']=%3.6f,\n'];
        fprintf(fileIDSystemParameters,tmpString,SysParams__addNoiseTimes(j));
    end
    for j=1:tmpSize
        tmpString=['SystemParameters::noOfFreqs[',num2str(j-1,'%3.0f'),']=%3.0f,\n'];
        fprintf(fileIDSystemParameters,tmpString,SysParams__noOfFreqs(j));
    end
    for j1=1:tmpSize
        for j2=1:3
            tmpString=['SystemParameters::maxFreqRate[',num2str(j1-1,'%3.0f'),'][',num2str(j2-1,'%3.0f'),']=%3.6f,\t'];
            fprintf(fileIDSystemParameters,tmpString,SysParams__maxFreqRate(j1,j2));
        end
        fprintf(fileIDSystemParameters,'\n');
    end
    for j1=1:tmpSize
        for j2=1:3
            tmpString=['SystemParameters::randomnessRate[',num2str(j1-1,'%3.0f'),'][',num2str(j2-1,'%3.0f'),']=%3.6f,\t'];
            fprintf(fileIDSystemParameters,tmpString,SysParams__randomnessRate(j1,j2));
        end
        fprintf(fileIDSystemParameters,'\n');
    end
    fprintf(fileIDSystemParameters,'\n');
    
    fprintf(fileIDSystemParameters,'Saving times:\n');
    tmpSize=size(SysParams__saving_times); tmpSize=tmpSize(2);
    for j=1:tmpSize
        tmpString=['SystemParameters::saving_times[',num2str(j-1,'%4.0f'),']=%',...
                   num2str(SysParams__dispform_saving_times(1),'%4.0f'),'.',...
                   num2str(SysParams__dispform_saving_times(2),'%4.0f'),'f,\n'];
        fprintf(fileIDSystemParameters,tmpString,SysParams__saving_times(j));
    end
    
    clear j tmpSize tmpString;
    fprintf(fileIDSystemParameters,'\n');
    fprintf(fileIDSystemParameters,'This variable encodes how the saving times appear in the filenames:\n');
    fprintf(fileIDSystemParameters,'SystemParameters::dispform_saving_times[0]=%3.0f,\n',SysParams__dispform_saving_times(1));
    fprintf(fileIDSystemParameters,'SystemParameters::dispform_saving_times[1]=%3.0f,\n',SysParams__dispform_saving_times(2));
    fprintf(fileIDSystemParameters,'\n');
    fprintf(fileIDSystemParameters,'Number of processors to be used:\n');
    fprintf(fileIDSystemParameters,'SystemParameters::nthreads=%s,\n',SysParams__nthreads);
    fclose(fileIDSystemParameters);
end